version: "3.7"
name: "microservices"
services:
  discovery-server:
    image: vutiendat3601/microservices_discovery-server:1.0.0
    environment:
      PROFILE: "dev"
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - backend
    healthcheck:
      test: "wget -O - http://localhost:8000/actuator/health || exit 1"
      interval: 10s
      timeout: 10s
      retries: 10
      
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: bitnami/kafka:3.4
    ports:
      - 8002:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"

  config-server:
    image: vutiendat3601/microservices_config-server:1.0.0
    ports:
      - "8001:8001"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    networks:
      backend:
        aliases:
          - "config-server"
    healthcheck:
      test: "wget -O - http://localhost:8001/actuator/health || exit 1"
      interval: 10s
      timeout: 10s
      retries: 10

  api-gateway:
    image: vutiendat3601/microservices_api-gateway:1.0.0
    environment:
      PROFILE: "dev"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - backend

  organization-postgres:
    image: postgres:alpine3.18
    ports:
      - "8110:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "123456a@"
      POSTGRES_DB: "organization_service"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - backend

  license-postgres:
    image: postgres:alpine3.18
    ports:
      - "8111:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "123456a@"
      POSTGRES_DB: "license_service"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - backend

  organiztion-service:
    image: vutiendat3601/microservices_organization-service:1.0.0
    environment:
      PROFILE: "dev"
    depends_on:
      organization-postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    ports:
      - "8210:8210"
    networks:
      - backend
      
  license-service:
    image: vutiendat3601/microservices_license-service:1.0.0
    environment:
      PROFILE: "dev"
    depends_on:
      license-postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    ports:
      - "8211:8211"
    networks:
      - backend

networks:
  backend:
    name: backend
    driver: bridge
